#!/bin/bash
#
# Launch applications. Typically called from a hotkey assignment.
#
# Usage:
#  MyHotKeyProgs [-nh] <application>"
#
# This is used to simplify hotkey assignments which would otherwise require
# multiple commands or scripts, and to also consolidate them all into one
# location for easy modification and additions.
#
# Two basic operations:
#   1) Always launch application.
#   2) If application is already launched, activate it, otherwise launch it.
#
# For operation (2), xdotool is used to check if the application is already
# loaded, and if so, activate it, otherwise launch it. Two functions are
# included, one to search for application by 'name', and the other to search by
# application 'classname.'
#
# The applications supported are listed in the 'case' statement at the end of
# this script, add additional case patterns for each application required.
#
# Author: Brian G. Olson (https://www.github.com/olsonbg)
#
# Current version:
#     https://github.com/olsonbg/dotfiles/blob/master/bin/MyHotKeyProgs
#
# Released under GPLv3 (http://www.gnu.org/licenses/gpl.html)
#
USAGE="Usage: $(basename "$0") [-nh] <application>"

SHOW_NOTIFICATION=0
#WEBBROWSER=chromium-browser
WEBBROWSER=google-chrome-stable

hotkey_cmd_terminal() {
	if [ "$1" == "notification" ]; then
		echo "terminal"
		return
	fi

	check_for_program urxvtc-d

	urxvtc-d
}

hotkey_cmd_calculator() {
	if [ "$1" == "notification" ]; then
		echo "bc calculator"
		return
	fi

	check_for_program urxvtc-d

	urxvtc-d -geometry 30x10 -e bc -lq
}

hotkey_cmd_spotify() {
	if [ "$1" == "classname" ]; then
		echo "spotify.Spotify"
		return
	fi

	if [ "$1" == "notification" ]; then
		echo "Spotify"
		return
	fi

	check_for_program spotify

	spotify
}

hotkey_cmd_gmail() {
	if [ "$1" == "classname" ]; then
		echo "mail.google.com__mail"
		return
	fi

	if [ "$1" == "notification" ]; then
		echo "Google Mail"
		return
	fi

	use_web_browser "--app=https://mail.google.com/mail"
}

hotkey_cmd_androidmessages() {
	if [ "$1" == "classname" ]; then
		echo "messages.android.com"
		return
	fi

	if [ "$1" == "notification" ]; then
		echo "Android Messages"
		return
	fi

	use_web_browser "--app=https://messages.android.com"
}

hotkey_cmd_thunderbird() {
	if [ "$1" == "name" ]; then
		echo 'Mozilla Thunderbird'
		return
	fi

	if [ "$1" == "notification" ]; then
		echo "thunderbird"
		return
	fi

	check_for_program thunderbird

	thunderbird
}

hotkey_cmd_calendar() {
	if [ "$1" == "classname" ]; then
		echo "www.google.com__calendar"
		return
	fi

	if [ "$1" == "notification" ]; then
		echo "Google Calendar"
		return
	fi

	use_web_browser "--app=https://www.google.com/calendar"
}

hotkey_cmd_outlook() {
	if [ "$1" == "classname" ]; then
		echo "outlook.office.com__calendar_view_"
		return
	fi

	if [ "$1" == "notification" ]; then
		echo "Outlook Calendar"
		return
	fi

	use_web_browser "--app=https://outlook.office.com/calendar/view/month"
}

hotkey_cmd_gdrive() {
	if [ "$1" == "classname" ]; then
		echo "drive.google.com"
		return
	fi

	if [ "$1" == "notification" ]; then
		echo "Google Drive"
		return
	fi

	use_web_browser "--app=https://drive.google.com"
}

use_web_browser() {
	local WEBBROWSERCONFIG

	if [ "$WEBBROWSER" == "chromium-browser" ]; then
		WEBBROWSERCONFIG=chromium-flags.conf
	elif [ "$WEBBROWSER" == "google-chrome-stable" ]; then
		WEBBROWSERCONFIG=chrome-flags.conf
	fi

	check_for_program "$WEBBROWSER"

	if [ -f "$HOME/.config/$WEBBROWSERCONFIG" ]; then
		xargs --arg-file="$HOME/.config/$WEBBROWSERCONFIG" "$WEBBROWSER" "$@"
	else
		"$WEBBROWSER" "$@"
	fi
}

use_chromium_browser() {
	WEBBROWSER=chromium-browser

	use_web_browser "$@"
}

use_chrome_browser() {
	WEBBROWSER=google-chrome-stable

	use_web_browser "$@"
}

check_for_program() {
	# Check for required programs.
	MyRequiredProgs "$1"

	if [ $? -eq 1 ]; then
		notify-send -u critical "Missing Program:" "$1"
		exit 1;
	fi
}

showNotification()
{
	local BODY="$1"
	local SUMMARY="MyHotKeyProgs"

	if [ $SHOW_NOTIFICATION -ne 0 ]; then
		notify-send -u low -t 1000 "$SUMMARY" "$BODY"
	fi
}

doActivate()
{
	local XWINID="$1"
	local PROG="$2"
	local NOTIFICATION="$3"

	if [ -z "$XWINID" ]; then
		[[ $SHOW_NOTIFICATION -ne 0 ]] && showNotification "$NOTIFICATION"
		"$PROG" &
	else
		xdotool windowactivate "$XWINID"
	fi
}

doKey()
{
	local XWINID="$1"
	local NOTIFICATION="$2"
	local KEY="$3"

	if [ -n "$XWINID" ]; then
		DESKTOP=$(xdotool get_desktop)
		xdotool set_desktop_for_window "$XWINID" "$DESKTOP"
		# The 'Alt' is just a dummy keypress hack to get this to work for
		# spotify.
		xdotool windowactivate --sync "$XWINID" key --delay 250 Alt "$KEY"
		xdotool windowminimize "$XWINID"
	fi
}

doLaunch()
{
	local PROG="$1"
	local NOTIFICATION="$2"

	[[ $SHOW_NOTIFICATION -ne 0 ]] && showNotification "$NOTIFICATION"

	"$PROG" &
}

doByWmctrl()
{
	local WMCTRL="$1"
	local PROG="$2"
	local NOTIFICATION="$3"

	WID="$(wmctrl -xl| grep "$WMCTRL" | awk '{print $1}')"

	doActivate "$WID" "$PROG" "$NOTIFICATION"
}

doByWmctrlKey()
{
	local WMCTRL="$1"
	local NOTIFICATION="$2"
	local KEY="$3"

	WID="$(wmctrl -xl| grep "$WMCTRL" | awk '{print $1}')"

	doKey "$WID" "$NOTIFICATION" "$KEY"
}



doByClassName()
{
	local CLASSNAME="$1"
	local PROG="$2"
	local NOTIFICATION="$3"

	doActivate "$(xdotool search --classname "$CLASSNAME" )" "$PROG" "$NOTIFICATION"
}

doByName()
{
	local NAME="$1"
	local PROG="$2"
	local NOTIFICATION="$3"

	doActivate "$(xdotool search --name "$NAME" )" "$PROG" "$NOTIFICATION"
}

backlight()
{
	local OPT="$1"

	case "$OPT" in
		"up")
			[[ $SHOW_NOTIFICATION -ne 0 ]] && showNotification "Increase Brightness"
			xbacklight +5
			;;
		"down")
			[[ $SHOW_NOTIFICATION -ne 0 ]] && showNotification "Decrease Brightness"
			xbacklight -5
			;;
		*)
			showhelp
			exit 1
			;;
	esac
}

screenshot() {
	local TYPE="$1"

	case "$TYPE" in
		"window")
			scrot '%Y-%m-%d_$wx$h.png' -e 'mv $f ~/shots/' -s
			;;
		*)
			scrot '%Y-%m-%d_$wx$h.png' -e 'mv $f ~/shots/'
			;;
	esac

	showNotification "Shot Saved to ~/shots"
}

pulseaudioVolume()
{
	local OPT="$1"
	local SINK=$(pactl list short sinks |grep 'alsa_output.pci-0000_00_1f.3.analog-stereo'|awk '{print $1}')
	local VOLSTEP="5%"

	case "$OPT" in
		"audioLowerVolume")
			[[ $SHOW_NOTIFICATION -ne 0 ]] && showNotification "Lower Volume"
			pactl set-sink-volume $SINK -$VOLSTEP
			;;
		"audioRaiseVolume")
			[[ $SHOW_NOTIFICATION -ne 0 ]] && showNotification "Raise Volume"
			pactl set-sink-volume $SINK +$VOLSTEP
			;;
		"audioMute")
			[[ $SHOW_NOTIFICATION -ne 0 ]] && showNotification "Toggle Mute Volume"
			pactl set-sink-mute $SINK toggle
			;;
		"echoMute")
			[[ $SHOW_NOTIFICATION -ne 0 ]] && showNotification "Toggle Echo Mute"
			echoSink=$(pactl list short sink-inputs |grep 'module-loopback.c'|cut -f 1)
			if [[ -n $echoSink ]]; then
				pactl set-sink-input-mute "$echoSink" toggle
			else
				showNotification "Can not find sink numeber for echo loopback."
			fi
			;;
		*)
			showhelp
			exit 1
			;;
	esac
}

suspendToRAM() {
	sudo /usr/sbin/pm-suspend
}

showhelp() {
	echo "$USAGE" >&2
	echo -e "\\nLaunch programs/scripts. Typically used from hotkeys.\\n"
	echo -e "-n \\tShow a notification.\\n"
	echo -e "List of applications:\\n"
	echo -e "   \\t(A) thunderbird"
	echo -e "   \\t(A) gmail"
	echo -e "   \\t(A) calendar"
	echo -e "   \\t(A) drive"
	echo -e "   \\t(A) androidmessages"
	echo -e "   \\t(A) spotify"
	echo -e "   \\t(N) terminal"
	echo -e "   \\t(N) web-browser"
	echo -e "   \\t    spotify_pauseplay"
	echo -e "\\n A: If application is already launched, activate it, otherwise"
	echo -e "    launch a new instance."
	echo -e " N: Always launch a new instance.\\n"
}

if [ $# -eq 0 ]; then
	showhelp
	exit 1
fi

while getopts "nh" OPTS; do
	case "$OPTS" in
		n)
			SHOW_NOTIFICATION=1
			;;
		h)
			showhelp
			exit 0
			;;
		*)
			showhelp
			exit 1
			;;
	esac
done

if [ $OPTIND -gt $# ]; then
	echo "Error: Missing argument."
	showhelp
	exit 1
fi

shift $((OPTIND - 1))

case "$1" in
	"terminal")
		wmctrl -s 0
		doLaunch "hotkey_cmd_terminal" "$(hotkey_cmd_terminal notification)"
		;;
	"thunderbird")
		wmctrl -s 2
		# doByName '.* - Earlybird' "thunderbird"
		doByName "$(hotkey_cmd_thunderbird name)" \
		         "hotkey_cmd_thunderbird" \
		         "$(hotkey_cmd_thunderbird notification)"
		;;
	"spotify")
		doByWmctrl "$(hotkey_cmd_spotify classname)" "hotkey_cmd_spotify" "$(hotkey_cmd_spotify notification)"
		;;
	"spotify_pauseplay")
		if pgrep spotify >/dev/null; then
			dbus-send --type=method_call \
			          --dest=org.mpris.MediaPlayer2.spotify \
			          /org/mpris/MediaPlayer2 \
			          org.mpris.MediaPlayer2.Player.PlayPause
		else
			# If spotify is not running, we must be using cmus.
			cmus-remote -u 2>/dev/null
		fi
		;;
	"spotify_next")
		if pgrep spotify >/dev/null; then
			dbus-send --type=method_call \
			          --dest=org.mpris.MediaPlayer2.spotify \
			          /org/mpris/MediaPlayer2 \
			          org.mpris.MediaPlayer2.Player.Next
		else
			# If spotify is not running, we must be using cmus.
			# cmus-remote -u 2>/dev/null
			:
		fi
		;;
	"spotify_previous")
		if pgrep spotify >/dev/null; then
			dbus-send --type=method_call \
			          --dest=org.mpris.MediaPlayer2.spotify \
			          /org/mpris/MediaPlayer2 \
			          org.mpris.MediaPlayer2.Player.Previous
		else
			# If spotify is not running, we must be using cmus.
			# cmus-remote -u 2>/dev/null
			:
		fi
		;;
	"spotify_stop")
		if pgrep spotify >/dev/null; then
			dbus-send --type=method_call \
			          --dest=org.mpris.MediaPlayer2.spotify \
			          /org/mpris/MediaPlayer2 \
			          org.mpris.MediaPlayer2.Player.Stop
		else
			# If spotify is not running, we must be using cmus.
			# cmus-remote -u 2>/dev/null
			:
		fi
		;;
	"gmail")
		wmctrl -s 2
		doByClassName "$(hotkey_cmd_gmail classname)" "hotkey_cmd_gmail" "$(hotkey_cmd_gmail notification)"
		;;
	"androidmessages")
		doByClassName "$(hotkey_cmd_androidmessages classname)" "hotkey_cmd_androidmessages" "$(hotkey_cmd_androidmessages notification)"
		;;
	"calendar")
		wmctrl -s 2
		doByClassName "$(hotkey_cmd_calendar classname)" "hotkey_cmd_calendar" "$(hotkey_cmd_calendar notification)"
		;;
	"outlook")
		wmctrl -s 2
		doByClassName "$(hotkey_cmd_outlook classname)" "hotkey_cmd_outlook" "$(hotkey_cmd_outlook notification)"
		;;
	"drive")
		doByClassName "$(hotkey_cmd_gdrive classname)" "hotkey_cmd_gdrive" "$(hotkey_cmd_gdrive notification)"
		;;
	"web-browser")
		wmctrl -s 1
		doLaunch "use_web_browser" "Web Browser Loading"
		;;
	"chrome")
		wmctrl -s 1
		doLaunch "use_chrome_browser" "Google Chrome Stable"
		;;
	"chromium")
		wmctrl -s 1
		doLaunch "use_chromium_browser" "Chromium"
		;;
	"calculator")
		doLaunch "hotkey_cmd_calculator" "$(hotkey_cmd_calculator notification)"
		;;
	"monBrightnessUp")
		backlight "up"
		;;
	"monBrightnessDown")
		backlight "down"
		;;
	"audioRaiseVolume")
		pulseaudioVolume "audioRaiseVolume"
		;;
	"audioLowerVolume")
		pulseaudioVolume "audioLowerVolume"
		;;
	"audioMute")
		pulseaudioVolume "audioMute"
		;;
	"echoMute")
		pulseaudioVolume "echoMute"
		;;
	"sleep")
		suspendToRAM
		;;
	"screenshot-window")
		screenshot "window"
		;;
	"screenshot-desktop")
		screenshot "desktop"
		;;
	*)
		showhelp
		exit 1
		;;
esac

